let bodyParser,cors,express,faker,promises,http,path,prop,takeLast,Maybe,buildComment,buildRouter,parseInt10;_cc7‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_cc7‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_cc7‍.w("express",[["default",["express"],function(v){express=v}]]);_cc7‍.w("faker",[["default",["faker"],function(v){faker=v}]]);_cc7‍.w("fs",[["promises",["promises"],function(v){promises=v}]]);_cc7‍.w("http",[["default",["http"],function(v){http=v}]]);_cc7‍.w("path",[["default",["path"],function(v){path=v}]]);_cc7‍.w("ramda",[["prop",["prop"],function(v){prop=v}],["takeLast",["takeLast"],function(v){takeLast=v}]]);_cc7‍.w("ramda-fantasy",[["Maybe",["Maybe"],function(v){Maybe=v}]]);_cc7‍.w("./factories.js",[["buildComment",["buildComment"],function(v){buildComment=v}]]);_cc7‍.w("./router",[["default",["buildRouter"],function(v){buildRouter=v}]]);_cc7‍.w("./utils",[["parseInt10",["parseInt10"],function(v){parseInt10=v}]]);




const fs = promises;









const port = process.env.PORT || 3000;

const seedingInterval = Maybe(process.env.SEEDING_INTERVAL)
  .map(parseInt10)
  .getOrElse(5 * 60 * 1000);

const commentLimit = Maybe(process.env.COMMENT_LIMIT)
  .map(parseInt10)
  .getOrElse(50);

const successRate = Maybe(process.env.SUCCESS_RATE)
  .map(parseFloat)
  .getOrElse(2 / 3);

const postsFile = path.resolve(__dirname, "./data/posts.json");

const run = async () => {
  const app = express();

  const data = await fs.readFile(postsFile, "utf8");
  const posts = JSON.parse(data);
  const users = posts.map(prop("user"));
  const comments = {};
  const context = { posts, users, comments, commentLimit, successRate };

  app.use(cors());
  app.use(bodyParser.json());
  app.use("/", buildRouter(context));

  setInterval(() => {
    posts.forEach(post => {
      const user = faker.random.arrayElement(users);
      const comment = buildComment({ user, created_at: new Date() });
      const postComments = comments[post.uuid] || [];

      comments[post.uuid] = takeLast(commentLimit, [...postComments, comment]);
    });
  }, seedingInterval);

  http
    .createServer(app)
    .listen(port, () => _cc7‍.g.console.log("App listening on port", port));
};

run();
